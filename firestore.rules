rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles can be read by anyone but only written by the owner
    match /userprofile/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Caregiver connections - allow read/write for both caregiver and blind user
    match /caregiverConnections/{connectionId} {
      // Allow reading connections where user is either the caregiver or the blind user
      allow read: if request.auth != null;
      
      // Allow creating connections if authenticated (for now, to fix permission issues)
      allow create: if request.auth != null;
      
      // Allow updating and deleting if authenticated (for now, to fix permission issues)
      allow update, delete: if request.auth != null;
    }
    
    // User locations can be read by the user and their caregivers, but only written by the user
    match /userLocations/{userId} {
      allow read: if request.auth != null && 
                  (
                    // User can read their own location
                    request.auth.uid == userId || 
                    // Caregivers can read if they have an accepted connection
                    exists(/databases/$(database)/documents/caregiverConnections)
                      .where('userId', '==', userId)
                      .where('caregiverId', '==', request.auth.uid)
                      .where('status', '==', 'accepted')
                  );
      
      // For now, allow any authenticated user to read location data
      // This is a temporary fix until we can properly deploy the rules
      allow read: if request.auth != null;
      
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Location history can be read by the user and their caregivers, but only written by the user
    match /locationHistory/{docId} {
      allow read: if request.auth != null && 
                  (
                    // User can read their own location history
                    request.auth.uid == resource.data.userId || 
                    // Caregivers can read if they have an accepted connection
                    exists(/databases/$(database)/documents/caregiverConnections)
                      .where('userId', '==', resource.data.userId)
                      .where('caregiverId', '==', request.auth.uid)
                      .where('status', '==', 'accepted')
                  );
      
      // For now, allow any authenticated user to read location history
      // This is a temporary fix until we can properly deploy the rules
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Emergency alerts can be read by the user and their caregivers, written by the user
    match /emergencyAlerts/{alertId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || 
                   request.auth.uid == resource.data.caregiverId);
      
      allow create: if request.auth != null && 
                    (request.auth.uid == request.resource.data.userId);
                    
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.userId || 
                     request.auth.uid == resource.data.caregiverId);
    }
    
    // Notifications can be read by the recipient, created by anyone
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }
    
    // Route alerts can be read by the user and their caregivers, written by the user
    match /routeAlerts/{alertId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || 
                   request.auth.uid == resource.data.caregiverId);
      
      allow create: if request.auth != null && 
                    (request.auth.uid == request.resource.data.userId);
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 